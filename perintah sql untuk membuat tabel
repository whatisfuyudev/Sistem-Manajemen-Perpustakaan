-- Drop existing tables (if any) and cascade to dependent objects
DROP TABLE IF EXISTS checkouts CASCADE;
DROP TABLE IF EXISTS books CASCADE;
DROP TABLE IF EXISTS notifications CASCADE;
DROP TABLE IF EXISTS reservations CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- Drop ENUM types if they exist
DROP TYPE IF EXISTS enum_users_role;
DROP TYPE IF EXISTS enum_users_accountStatus;
DROP TYPE IF EXISTS enum_reservations_status;
DROP TYPE IF EXISTS enum_notifications_channel;
DROP TYPE IF EXISTS enum_notifications_status;
DROP TYPE IF EXISTS enum_checkouts_status;

---------------------------------------------------------------------
-- Create ENUM types and tables
---------------------------------------------------------------------

-- Users: Create ENUM types for role and accountStatus
CREATE TYPE enum_users_role AS ENUM ('Admin', 'Librarian', 'Patron');
CREATE TYPE enum_users_accountStatus AS ENUM ('Active', 'Suspended', 'Pending');

-- Create the users table
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  role enum_users_role NOT NULL DEFAULT 'Patron',
  phone VARCHAR(255),
  address VARCHAR(255),
  "accountStatus" enum_users_accountStatus NOT NULL DEFAULT 'Active',
  "profilePicture" VARCHAR(255),
  "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

---------------------------------------------------------------------

-- Reservations: Create ENUM type for status
CREATE TYPE enum_reservations_status AS ENUM ('pending', 'available', 'fulfilled', 'canceled', 'expired');

-- Create the reservations table
CREATE TABLE reservations (
  id SERIAL PRIMARY KEY,
  "userId" INTEGER NOT NULL,
  "bookIsbn" VARCHAR(255) NOT NULL,
  "requestDate" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  "queuePosition" INTEGER NOT NULL DEFAULT 1,
  status enum_reservations_status NOT NULL DEFAULT 'pending',
  "expirationDate" TIMESTAMP WITH TIME ZONE,
  notes TEXT,
  "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

---------------------------------------------------------------------

-- Notifications: Create ENUM types for channel and status
CREATE TYPE enum_notifications_channel AS ENUM ('email', 'sms', 'inapp');
CREATE TYPE enum_notifications_status AS ENUM ('pending', 'sent', 'failed');

-- Create the notifications table
CREATE TABLE notifications (
  id SERIAL PRIMARY KEY,
  channel enum_notifications_channel NOT NULL,
  recipient VARCHAR(255) NOT NULL,
  subject VARCHAR(255),
  message TEXT NOT NULL,
  status enum_notifications_status NOT NULL DEFAULT 'pending',
  read BOOLEAN NOT NULL DEFAULT false,
  "scheduledAt" TIMESTAMP WITH TIME ZONE,
  "deliveredAt" TIMESTAMP WITH TIME ZONE,
  "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

---------------------------------------------------------------------

-- 1) Ensure the enum type exists
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
      FROM   pg_type t
      JOIN   pg_namespace n ON n.oid = t.typnamespace
     WHERE   n.nspname = 'public'
       AND   t.typname = 'enum_checkouts_status'
  ) THEN
    CREATE TYPE public.enum_checkouts_status AS ENUM (
      'active', 'returned', 'overdue', 'lost', 'damaged'
    );
  END IF;
END
$$;

-- 2) Create the checkouts table
CREATE TABLE public.checkouts (
  id                   SERIAL PRIMARY KEY,
  "userId"             INTEGER      NOT NULL,
  "bookIsbn"           VARCHAR(255) NOT NULL,
  "checkoutDate"       TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
  "dueDate"            TIMESTAMPTZ  NOT NULL,
  "returnDate"         TIMESTAMPTZ,
  status               public.enum_checkouts_status NOT NULL DEFAULT 'active',
  "renewalCount"       INTEGER      NOT NULL DEFAULT 0,
  fine                 DECIMAL(10,2) NULL DEFAULT 0.00,
  outstandingFine      DECIMAL(10,2) NULL DEFAULT 0.00,
  "reservationId"      INTEGER,
  "renewalRequested"   BOOLEAN      NOT NULL DEFAULT FALSE,
  "requestedRenewalDays" INTEGER,
  "createdAt"          TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
  "updatedAt"          TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
  CONSTRAINT fk_reservation
    FOREIGN KEY ("reservationId")
    REFERENCES public.reservations(id)
    ON UPDATE CASCADE
    ON DELETE SET NULL
);

---------------------------------------------------------------------

-- Books: Create the books table
CREATE TABLE books (
  isbn VARCHAR(255) PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  authors TEXT[] NOT NULL,
  genres TEXT[],
  publisher VARCHAR(255),
  "publicationYear" INTEGER,
  description TEXT,
  "coverImage" VARCHAR(255),
  "totalCopies" INTEGER NOT NULL DEFAULT 0,
  "availableCopies" INTEGER NOT NULL DEFAULT 0,
  formats TEXT[],
  "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);


---------------------------------------------------------------------

-- create news table
CREATE TABLE news (
  id SERIAL PRIMARY KEY,
  title VARCHAR(75) NOT NULL,
  image_url TEXT,
  body TEXT NOT NULL,
  published BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);


---------------------------------------------------------------------

-- create article table