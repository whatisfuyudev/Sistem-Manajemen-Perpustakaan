
1. start from app.js line 54, api section, make it includes all the routes,
   for each route, make their controller, then make their services.
   make sure to thoroughly understand the underlying functionalities for each services.
   "
   [project description]
   from the above project description, focusing on X, what are the core functionalities that it might possible has? make it accurate and comprehensive.
    
   make it excellent, highly accurate like real world projects, and comprehensive and exhaustive
   
   make it mobile responsive and modern and minimalist in style.
   "
   

2. make user interface, reponsive html pages
  - make the user/client side first
    - make it similiar to https://www.libib.com/
      - there will be homepage, individual book page, profile page, my reservations page, my checkouts page, register page, login page
        - homepage has a link to profile page, register/login page, individual book page,
          my reservation page, my checkouts page      
          - make my checkout page
            - back end side request renewal 
              and admin/librarian renewal needs to be connected to each other.
            
            - test request renewal from front end to back end to front end again.

  - make the admin/librarian side
    - construct admin panel so you can test the my checkout page 
      - fix books section

        - table data result
          - inside individual book page edit button point to edit page
          - editing book page

        - add new book button, look at behance design
          - adding new book page
        
        - delete utilizing the checkbox on the left side
          - delete book with prompt/modal for confirmation
        
        
        (tip: recycle the test pages, example: createBook.html and its script)

      - fix checkouts section
        - individual checkout page
        - searching checkouts based on multiple criteria
        - add a new checkout page
        - renew a checkout with modal confirmation
        - process a return checkout page
        - new way to visualize each checkout data
          like maybe show books and user too
        (tip: recycle the test pages)

      - fix reservations section
        - individual reservation page
        - searching reservations based on multiple criteria
        - add new reservation page
        - cancel any active reservation with modal confirmation
        - modify any reservation notes?
        - promote a reservation with modal confirmation
        - new way to visualize each reservation data
          like maybe show books and user too
        (tip: recycle the test pages)

      - fix users section
        - individual user page
        - able to add new user (new page)
        - able to edit a single user data (new page)
        - able to delete a user with modal confirmation
        - able to query user data based on multiple criteria.

      - fix notifications section
        - individual notification page
        - able to manually send a notification (new page)
        - able to schedule send a notification (new page)
        - able to query notification data based on multiple criteria


      - rework the reports section based on docs
    
    - move it into proper endpoint

### General TODO
- schedule notification functionality or notifications functionalities in general
- make sure the book service works properly, ensure data sanitization
- prevent upload cover image abuse (upload the image at the same time as clicking update book data)
- at user routes, create new user is only for admin access
- make two different endpoints, one for admin/librarian, the other for client/patron/user
  - New Endpoint to get single user by their id (admin/librarian only)
  - New Endpoint to update a user by their id (admin/librarian only)


- check whether the jwt token is expired or not
- implement refresh tokens and expiration checking for main auth jwt_token (1 hour expiration time)
  - refresh tokens last for a long time, like 1 week or 1 month

this app will have two sides, one for patron (book enjoyer) and one for librarians (book manager)
- patron can only make reservation to borrow books, see their profile, and see all books, search books with ui
- librarian can add books, see all books, see all patrons, see all borrowed books, see all reservations, see all fines, see all reports, manage borrowing

- checkouts is for librarian
- reservations is for user (only some of it, other endpoints is for admin/librarian)

- rate limiting on apis
- on homepage script, when the it loads and randomly picks five books, 
  limit into only picking at most 100 books for performance reason while
  maintining randomness. bonus points if it is possible to do this whole
  randomize seaching thing directly with sequilize. 

- more on home page like books based on author
  books based in letters
  idk ask gpt for books based on what that make sense

- code cleanup, 
  - move test search page html file into a new temporary folder or delete it
  - delete unused/test pages
  - css cleanup, no duplicate style
  - js cleanup, no duplicate code
  - delete any console.log/console.error on front end
  - move custom pop up (inside myReservation html and js)
    into its own file so it is reuseable accross the whole app
    - change alert or prompt to custom pop up


- try changing the return http code error on controllers
  into customError() instead.

- auth middleware redirect to login page instead?

- fix margin/gap between text and things inside reservation card on myreservations page

- on homepage top bar part thing, collapse it in mobile

- new ui on my reservations and my checkouts page, modern

- overdue & expired checker mechannism where it will run if
  it has not run that day, something to do with boolean flag
