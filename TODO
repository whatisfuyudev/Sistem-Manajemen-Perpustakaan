
1. start from app.js line 54, api section, make it includes all the routes,
   for each route, make their controller, then make their services.
   make sure to thoroughly understand the underlying functionalities for each services.
   "
   [project description]
   from the above project description, focusing on X, what are the core functionalities that it might possible has? make it accurate and comprehensive.
    
   make it excellent, highly accurate like real world projects, and comprehensive and exhaustive
   
   make it mobile responsive and modern and minimalist in style.
   "
   

2. make user interface, reponsive html pages
  - make the user/client side first
    - make it similiar to IPUSNAS (have article section and news/pengumuman section)
      - there will be homepage, individual book page, profile page, my reservations page, my checkouts page, register page, login page

        - probably add more things on the homepage example would be book based by author, genre, or even a new section about article and dedicated article page, also news section that is related to book news or book things or library news.
          - article section on homepage
            - di homepage, bagian atas news, tengah rekomendasi buku, bawah article section
          - articles page
          - individual article page

          - homepage featured books, change behaviour when mobile/tablet to scroll left and right instead of going down

        - login and register add library icon and name,  new logo on header nav bar 

        - my checkout my reservations, better request renewal css ui
        - article section similar to ipusnas, front end side swiping card, back end manage
        
        - modify bulk deletion on books and users tab on admin panel so that
          api endpoint can accept multiple id and delete multiple data and
          not repeatedly call an api endpoint to delete a single data each time.
          news publish and unpublish suffers the same fate, change them.


### General TODO
- notification maybe batch send, new endpoint?
- make sure the book service works properly, ensure data sanitization
- checkout model no negative number on renewalCount or other number based column

- send email notification if checkout is overdue 

- check whether the jwt token is expired or not
- implement refresh tokens and expiration checking for main auth jwt_token (1 hour expiration time)
  - refresh tokens last for a long time, like 1 week or 1 month
- no return jwt token from login controller because bad practice?

this app will have two sides, one for patron (book enjoyer) and one for librarians (book manager)
- patron can only make reservation to borrow books, see their profile, and see all books, search books with ui
- librarian can add books, see all books, see all patrons, see all borrowed books, see all reservations, see all fines, see all reports, manage borrowing

- rate limiting on apis
- on homepage script, when the it loads and randomly picks five books, 
  limit into only picking at most 100 books for performance reason while
  maintining randomness. bonus points if it is possible to do this whole
  randomize seaching thing directly with sequilize. 

- code cleanup, 
  - move test search page html file into a new temporary folder or delete it
  - delete unused/test pages
  - css cleanup, no duplicate style
  - js cleanup, no duplicate code
  - delete any console.log/console.error on front end
  - move custom pop up into its own file so it is reuseable accross the whole app
    - change alert or prompt to custom pop up
  - user controller and books controller redundant code when removing empty input 


- new ui on my reservations and my checkouts page, modern
  - fix margin/gap between text and things inside reservation card on myreservations page

- implement accountStatus on user data/model, look at docs

- stress test, 1 million data is too big, test for 100k, 10k, 1k

- sequilize association between table/model

- maybe add replace lost book and repair damaged book functionality that handle
  checkout record properly

- user engagement, because it fetch two different api endpoint the data retrieved can be different. the difference in data mess up the front end. handle when there is a user with only reservation or checkouts

- maybe replace back end console.error for logger.error

- log only the important stuff

- inapp notification? consider deleting or implementing it.