
1. start from app.js line 54, api section, make it includes all the routes,
   for each route, make their controller, then make their services.
   make sure to thoroughly understand the underlying functionalities for each services.
   "
   [project description]
   from the above project description, focusing on X, what are the core functionalities that it might possible has? make it accurate and comprehensive.
    
   make it excellent, highly accurate like real world projects, and comprehensive and exhaustive
   
   make it mobile responsive and modern and minimalist in style.
   "
   
### General TODO
- send email notification if checkout is overdue 

- check whether the jwt token is expired or not
- implement refresh tokens and expiration checking for main auth jwt_token (1 hour expiration time)
  - refresh tokens last for a long time, like 1 week or 1 month

- rate limiting on apis
- on homepage script, when the it loads and randomly picks five books, 
  limit into only picking at most 100 books for performance reason while
  maintining randomness. bonus points if it is possible to do this whole
  randomize seaching thing directly with sequilize. 

- code cleanup, 
  - css cleanup, no duplicate style
  - js cleanup, no duplicate code
  - delete any console.log/console.error on front end
  - move custom pop up into its own file so it is reuseable accross the whole app
    - change alert or prompt to custom pop up
  - user controller and books controller redundant code when removing empty input 

- implement accountStatus on user data/model, look at docs

- stress test, 1 million data is too big, test for 100k, 10k, 1k

- user engagement, because it fetch two different api endpoint the data retrieved can be different. the difference in data mess up the front end. handle when there is a user with only reservation or checkouts

- log only the important stuff

- github repo readme, do it properly