
1. start from app.js line 54, api section, make it includes all the routes,
   for each route, make their controller, then make their services.
   make sure to thoroughly understand the underlying functionalities for each services.
   "
   [project description]
   from the above project description, focusing on X, what are the core functionalities that it might possible has? make it accurate and comprehensive.
    
   make it excellent, highly accurate like real world projects, and comprehensive and exhaustive
   "
   
2. do for then checkouts, then reservations, then reports, then notification, do more on auth functionalities
  - test all endpoint, make an html page that interacts with it
  
  - processing checkout, when ever it is damaged or lost,
    do custom fine? 

    Understanding Financial Fines
    The Financial Report breaks down the fines collected from checkouts based on the item's status. In our system, fines typically arise when items are:

    Overdue: Items returned after their due date incur a fine calculated per day.
    Lost: Items that are not returned are reported as lost, with a fine often equivalent to the replacement cost.
    Damaged: Items returned in a damaged condition may be subject to additional charges to cover repair or replacement.
    The table above lists each status along with the sum of fines associated with that category. The final row labeled Total Fines represents the aggregate sum across all categories, giving you a complete picture of the fines collected.


  - reports functionality
    - on custom tab, 
      - when only start date is set and end date is not set, 
        filter a checkout with checkoutDate that is equal or more than start date
      - when only end date is set and start date is not set,
        filter a checkout with checkoutDate that is equal or less than end date 

    - pagination and other technologies that limits requests on every tab


  - notification through email
    - when a reservation gets promoted and becomes available
      send notification through email

3. make user interface, reponsive html pages
  - homepage needs some fixing
  - every page should be proper and interconnected

### General TODO
- make sure the book service works properly, ensure data sanitization
- prevent upload cover image abuse (only upload the image at the same time as clicking update book data)
- make ui html page
- make the html homepage that display all books (search up responsive design)
- at user routes, create new user is only for admin access
- make two different endpoints, one for admin/librarian, the other for client/patron/user
  - New Endpoint to get single user by their id (admin/librarian only)
  - New Endpoint to update a user by their id (admin/librarian only)

- make the correct Flow for reserving a book
  1. User is in homepage or in search result page
  2. User click on book
  3. Go to individual book page with all book information and a button for reserving that book
  4. When user click that reserving book, it sends the correct and needed book data to the api
  5. A reservation is made

- make the correct flow for cancelling a reservation
  1. user is on my reservation page
  2. on each reservation there will be a button that
     when pressed, will send the reservation id to the api

- make the correct modify reservation flow
  1. user is on my reservation page
  2. user click on a reservation, redirect to individual reservation page
  3. there is a button to modify it
  4. after modifying things, there is a send button, click and it sends the data to the api

- add a search bar for checkout history and reservation history

- pagination and or limit data fetching on checkout history and reservation history
  so it does not load every single data immidiately

- implement refresh tokens and expiration checking for main auth jwt_token (1 hour expiration time)
  - refresh tokens last for a long time, like 1 week or 1 month

this app will have two sides, one for patron (book enjoyer) and one for librarians (book manager)
- patron can only make reservation to borrow books, see their profile, and see all books, search books with ui
- librarian can add books, see all books, see all patrons, see all borrowed books, see all reservations, see all fines, see all reports, manage borrowing

- checkouts is for librarian
- reservations is for user (only some of it, other endpoints is for admin/librarian)